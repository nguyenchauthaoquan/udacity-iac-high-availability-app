AWSTemplateFormatVersion: 2010-09-09
Description: This template deploys the network infrastructure
Parameters:
  EnvironmentName:
    Description: An environment name for VPC network configuration
    Type: String
    Default: UdacityHighAvailabilityApp
  VpcCIDR:
    Description: CIDR IP range for VPC configuration (default is 10.0.0.0/16)
    Type: String
    Default: 10.0.0.0/16
  PublicSubnetCIDR1a:
    Description: Public subnet CIDR for availability zone 1a
    Type: String
    Default: 10.0.0.0/24
  PublicSubnetCIDR1b:
    Description: Public subnet CIDR for availability zone 1b
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnetCIDR1a:
    Description: Private Subnet CIDR for availability zone 1a
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnetCIDR1b:
    Description: Private Subnet CIDR for availability zone 1b
    Type: String
    Default: 10.0.3.0/24
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              -  - !Ref EnvironmentName
                 - "-vpc-"
                 - Ref: "AWS::Region"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - '-vpc-internet-gateway-'
                - Ref: "AWS::Region"
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC
  # ---------- Routing for public routes ---------
  # ---------- Public Route Table ----------------
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - '-vpc-public-route-table-'
                - Ref: "AWS::Region"
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # ------------ Availability Zones -------------------
  # ------------ Public Subnet ------------------------
  PublicSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCIDR1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - '-vpc-public-subnet-availability-zone-1a-'
                - Ref: "AWS::Region"
  PublicSubnet1b:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCIDR1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - '-vpc-public-subnet-availability-zone-1b-'
                - Ref: "AWS::Region"
  # ------------ Private Subnet ------------------------
  PrivateSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetCIDR1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - '-vpc-private-subnet-availability-zone-1a-'
                - Ref: "AWS::Region"
  PrivateSubnet1b:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetCIDR1b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - '-vpc-private-subnet-availability-zone-1b-'
                - Ref: "AWS::Region"
  # ------------ Elastic IPs ------------------------
  ElasticIP1a:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - '-vpc-elastic-ip-availability-zone-1a-'
                - Ref: "AWS::Region"
  ElasticIP1b:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - '-vpc-elastic-ip-availability-zone-1b-'
                - Ref: "AWS::Region"
  # ------------ VPC NAT Gateways ------------------------
  NATGateway1a:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP1a.AllocationId
      SubnetId: !Ref PublicSubnet1a
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - '-vpc-nat-gateway-availability-zone-1a-'
                - Ref: "AWS::Region"
  NATGateway1b:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP1b.AllocationId
      SubnetId: !Ref PublicSubnet1b
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - '-vpc-nat-gateway-availability-zone-1b-'
                - Ref: "AWS::Region"
  # ------------ Public subnet routing configurations ------------------------
  PublicSubnet1aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1a
  PublicSubnet1bRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1b
  # ------------ Private Route Tables ------------------------
  PrivateRouteTable1a:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - '-vpc-private-route-table-availability-zone-1a-'
                - Ref: "AWS::Region"
  DefaultPrivateRoute1a:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1a
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1a
  PrivateSubnet1aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1a
      SubnetId: !Ref PrivateSubnet1a
  PrivateRouteTable1b:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - '-vpc-private-route-table-availability-zone-1b-'
                - Ref: "AWS::Region"
  DefaultPrivateRoute1b:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1b
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1b
  PrivateSubnet1bRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1b
      SubnetId: !Ref PrivateSubnet1b
  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allow HTTP traffic to ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: TCP
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 80
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /index.html
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
  ALBListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1a
        - !Ref PublicSubnet1b
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: my-vpc-application-load-balancer
      Scheme: internet-facing
      Type: application
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - '-vpc-application-load-balancer-'
                - Ref: "AWS::Region"
  BastionHostSecurityGroup1a:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Bastion1a"
      GroupDescription: The security group for bastion host and enable SSH to it
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - '-vpc-bastion-security-group-availability-zone-1a'
                - Ref: "AWS::Region"
  BastionHostSecurityGroup1b:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Bastion1b"
      GroupDescription: The security group for bastion host and enable SSH to it
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2222
          ToPort: 2222
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - '-vpc-bastion-security-group-availability-zone-1b'
                - Ref: "AWS::Region"
  WebserverSecurityGroup1a:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Web server 1a"
      GroupDescription: The security group for web server and enable HTTP access to it
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref BastionHostSecurityGroup1a
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - '-vpc-web-server-security-group-availability-zone-1a-'
                - Ref: "AWS::Region"
  WebserverSecurityGroup1b:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Web server 1b"
      GroupDescription: The security group for web server and enable HTTP access to it
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref BastionHostSecurityGroup1b
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - '-vpc-web-server-security-group-availability-zone-1b-'
                - Ref: "AWS::Region"
Outputs:
  BastionHostSecurityGroup1a:
    Value: !Ref BastionHostSecurityGroup1a
    Export:
      Name: !Sub "BastionHostSecurityGroup1a"
  BastionHostSecurityGroup1b:
    Value: !Ref BastionHostSecurityGroup1b
    Export:
      Name: !Sub "BastionHostSecurityGroup1b"
  PublicSubnet1a:
    Value: !Ref PublicSubnet1a
    Export:
      Name: !Sub "PublicSubnet1a"
  PublicSubnet1b:
    Value: !Ref PublicSubnet1b
    Export:
      Name: !Sub "PublicSubnet1b"
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub "VPC"